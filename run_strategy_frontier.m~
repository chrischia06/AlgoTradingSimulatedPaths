%%
clear;
close all hidden;

%%% Set Strategy Here
% description = "";
description = "PCA optimisation, warmup = 100, rebalancing_freq = 100, k = 5, T = 500 runs, lambda=100";
chosen_strategy = @pca_optimisation;
lambda_grid = 0.5:0.25:5;
N_lambdas = size(lambda_grid, );
%%%
%% Define Parameters Here

% seed
rng(2021);

% number of runs
N = 1;
% N = 1; % for testing

% Market Model Parameters
% **Clarifications to T, d from Slack Channel
T = 500; % time horizon
d = 50; % assets
eta = 0.0002; % market impact
Mrank = floor(0.25*d); % rank   of cov
s0 = 100*ones(d,1); % intial asset prices
    
% cache mus (drift), cs (transaction proportion)
mus = 2e-5 * normrnd(0,1,T,d).^2; % drift
cs = 1e-8 * normrnd(0,1,T,d).^2; % market impact; non-negative

terminal_rets = zeros(N_lambdas, N);

% backtest on simulated data
for lambda_i = 1:N_lambdas
    % cache backtest results
    strategy_returns  = zeros(N, T);
    max_drawdowns  = zeros(N, 1);
    max_drawdown_duration = zeros(N, 1);
    
    for i = 1:N    
        % provided code to generate low rank matrix
        [U,S,V] = svd( randn(d,d) );
        diagM = diag( [ normrnd(0,1,Mrank,1) ; zeros(d-Mrank,1) ] );
        M = 5e-3 * U * diagM * V'; % Randomly generated matrix of rank Mrank    

        % Initialize Simulation Environment
        model_params = struct('mu', mus(i,:), 'M', M,'c',cs(i, :),'eta',eta);
        sim_obj = MarketSimulator(T, s0, model_params);

        % Run strategy on environment
        sim_obj = chosen_strategy(sim_obj, lambda_grid(lambda_i));

        terminal_rets(lambda_i, i) = sim_obj.R_hist(T);
    end
end

